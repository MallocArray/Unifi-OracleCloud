#cloud-config
package_update: true
package_upgrade: true
package_reboot_if_required: true
packages:
    - jq
    - ca-certificates
    - wget
    - s3fs

runcmd:
    # Dynamic DNS Update using URL from variables stored in metadata
    - curl $(cloud-init query ds.metadata.ddns_url)
    # Install latest Unifi controller
    - /usr/lib/unifi/unifi-install.sh
    # If options for secret key are configured, create credential file and mount the autobackup folder using storage bucket
    - |
        if [ $(cloud-init query ds.metadata.customer_secret_key) ]
        then
          echo $(cloud-init query ds.metadata.customer_access_key):$(cloud-init query ds.metadata.customer_secret_key) > /home/ubuntu/.passwd-s3fs
          chmod 600 /home/ubuntu/.passwd-s3fs
          bash /usr/lib/unifi/mount-bucket.sh
          # Add to fstab so it is mounted on each reboot
          echo "s3fs#$(cloud-init query ds.metadata.bucket_name) /var/lib/unifi/backup/autobackup fuse _netdev,allow_other,nomultipart,use_path_request_style,passwd_file=/home/ubuntu/.passwd-s3fs,url=https://$(cloud-init query ds.metadata.bucket_namespace).compat.objectstorage.$(cloud-init query ds.metadata.region).oraclecloud.com/ 0 0" | tee -a /etc/fstab
        fi


write_files:
  - content: |
      iptables -I INPUT 2 -p udp --dport 1900 -j ACCEPT
      iptables -I INPUT 2 -p udp --dport 10001 -j ACCEPT
      iptables -I INPUT 2 -p udp --destination-port "5656:5699" -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 27117 -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 6789 -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 8843 -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 8880 -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 8443 -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 443 -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 8080 -j ACCEPT
      iptables -I INPUT 2 -p udp --dport 3478 -j ACCEPT
      iptables -I INPUT 2 -p udp --dport 5514 -j ACCEPT
      iptables -I INPUT 2 -p udp --dport 123 -j ACCEPT
      iptables -I INPUT 2 -p tcp --dport 80 -j ACCEPT
      iptables-save >  /etc/iptables/rules.v4

      # https://help.ui.com/hc/en-us/articles/218506997-UniFi-Ports-Used
      # If using ufw, the install script does not configure Lets Encrypt properly as it only sees the internal IP
      # ufw allow ssh  # Remote access
      # ufw allow 53/tcp  # Port used for DNS. This is required for Guest Portal redirection, downloading updates, and remote access
      # ufw allow 53/udp  # Port used for DNS. This is required for Guest Portal redirection, downloading updates, and remote access
      # ufw allow 80/tcp  # Port for verifying SSL certificate with Lets Encrypt
      # ufw allow 3478/udp  # Port used for STUN
      # ufw allow 5514/udp  # Port used for remote syslog capture
      # ufw allow 8080/tcp  # Port used for device and application communication.
      # ufw allow 443/tcp  # Port used for application GUI/API as seen in a web browser
      # ufw allow 8443/tcp  # Port used for application GUI/API as seen in a web browser.
      # ufw allow 8880/tcp  # Port used for HTTP portal redirection
      # ufw allow 8843/tcp  # Port used for HTTPS portal redirection
      # ufw allow 6789/tcp  # Port used for UniFi mobile speed test
      # ufw allow 27117/tcp  # Port used for local-bound database communication
      # ufw allow 5656:5699/udp  # Ports used by AP-EDU broadcasting
      # ufw allow 10001/udp  # Port used for device discovery
      # ufw allow 1900/udp  # Port used for "Make application discoverable on L2 network" in the UniFi Network settings
      # ufw allow 123/udp  # Port used for NTP (date/time). Required for establishing secure communication with remote access servers
      # # Enable UFW so script can open firewall ports automatically
      # ufw --force enable

      # Create default parameter set for the Unifi script to run automatically
      PARAMETERS="--skip"

      # If DNS name was provided, use it when setting up Unifi
      if [ $(cloud-init query ds.metadata.dns_name) ]
      then
          PARAMETERS="$PARAMETERS --fqdn $(cloud-init query ds.metadata.dns_name) --retry 5"
      fi

      if [ $(cloud-init query ds.metadata.email) ]
      then
          PARAMETERS="$PARAMETERS --email $(cloud-init query ds.metadata.email)"
      fi

      #Running GlennR's install script which also installs prerequisites
      # https://community.ui.com/questions/UniFi-Installation-Scripts-or-UniFi-Easy-Update-Script-or-UniFi-Lets-Encrypt-or-UniFi-Easy-Encrypt-/ccbc7530-dd61-40a7-82ec-22b17f027776
      rm unifi-latest.sh &> /dev/null
      wget 'https://get.glennr.nl/unifi/install/install_latest/unifi-latest.sh'
      echo "Public IP appears to be $(curl https://ip.glennr.nl/ -s)"
      echo "Preparing to run 'bash unifi-latest.sh $PARAMETERS'"
      bash unifi-latest.sh $PARAMETERS
    path: /usr/lib/unifi/unifi-install.sh
    permissions: '0744'

  - content: |
      #!/bin/bash
      curl -T $(/usr/bin/find /var/lib/unifi/backup -iname '*.unf') $(cloud-init query ds.metadata.bucket_url)
    path: /usr/lib/unifi/unifi-backup.sh
    permissions: '0744'

    # Upload backup file at 1:00 am every day
  - content: |
      0 1 * * * /usr/lib/unifi/unifi-backup.sh
    path: /etc/crontab
    append: true

  - content: |
        # Renews certificates for Unifi applications
        # Create default parameter set for the Unifi script to run automatically
        PARAMETERS=" --skip"

        # If DNS name was provided, use it when setting up Unifi
        if [ $(cloud-init query ds.metadata.dns_name) ]
        then
            PARAMETERS="$PARAMETERS --fqdn $(cloud-init query ds.metadata.dns_name) --retry 5"
        fi

        if [ $(cloud-init query ds.metadata.email) ]
        then
            PARAMETERS="$PARAMETERS --email $(cloud-init query ds.metadata.email)"
        fi

        rm unifi-easy-encrypt.sh &> /dev/null
        wget https://get.glennr.nl/unifi/extra/unifi-easy-encrypt.sh
        echo "Preparing to run 'bash unifi-easy-encrypt.sh $PARAMETERS'"
        bash unifi-easy-encrypt.sh $PARAMETERS
    path: /usr/lib/unifi/unifi-encrypt.sh
    permissions: '0744'

    # Update Lets Encrypt certificates at 1:00 am on the first day of the month, every other month
  - content: |
      0 1 1 1,2,4,6,8,10 * /usr/lib/unifi/unifi-encrypt.sh
    path: /etc/crontab
    append: true

    # Update Controller at 2:00 am every Monday
  - content: |
      0 2 * * 1 rm unifi-update.sh &> /dev/null; wget https://get.glennr.nl/unifi/update/unifi-update.sh && bash unifi-update.sh
    path: /etc/crontab
    append: true

    # Mounts a bucket as part of the file system for Unifi backups
  - content: |
      # https://blogs.oracle.com/cloud-infrastructure/post/mounting-an-object-storage-bucket-as-file-system-on-oracle-linux
      s3fs $(cloud-init query ds.metadata.bucket_name) /var/lib/unifi/backup/autobackup -o passwd_file=/home/ubuntu/.passwd-s3fs -o url=https://$(cloud-init query ds.metadata.bucket_namespace).compat.objectstorage.$(cloud-init query ds.metadata.region).oraclecloud.com/ -o nomultipart -o use_path_request_style -o nonempty
    path: /usr/lib/unifi/mount-bucket.sh

# Perform a reboot once cloud-init has completed.
power_state:
  mode: reboot


# Documentations says an array of an array of strings, hence the [] and , between each command. Can be a full command between quotes but against docs

# https://cloudinit.readthedocs.io/en/latest/topics/modules.html
# https://docs.microsoft.com/en-us/azure/virtual-machines/linux/using-cloud-init
# https://community.ui.com/questions/UniFi-Installation-Scripts-or-UniFi-Easy-Update-Script-or-Ubuntu-16-04-18-04-18-10-19-04-and-19-10-/ccbc7530-dd61-40a7-82ec-22b17f027776
# https://help.ubnt.com/hc/en-us/articles/218506997-UniFi-Ports-Used
